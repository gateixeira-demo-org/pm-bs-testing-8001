name: Sanity Tests

on:
# pull_request:
# push:
#   branches:
#     - master
 workflow_dispatch:

env:
  USER: qaboot
  GHES_VERSION: 3.9
  GHES_PLATFORM: aws
  GHES_REGION: us-west-1

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      qaboot_hostname: ${{ steps.run_qaboot.outputs.qaboot_hostname }}
      
    permissions:
      contents: read
      
    steps:
    # - uses: actions/checkout@v3
    #   with:
    #     show-progress: false
    # - name: Generate SSH key
    #   run: |
    #     eval `ssh-agent -s`
    #     ssh-keygen -q -t rsa -N '' -f ~/.ssh/id_rsa <<<y >/dev/null 2>&1
    # - name: Set up Ruby 2.7
    #   uses: ruby/setup-ruby@v1
  
    - name: Build + Launch GHES with qaboot
      id: run_qaboot
      env:
        QABOOT_USER: ${{ env.USER }}
        # QABOOT_GITHUB_TOKEN: ${{ secrets.QABOOT_GITHUB_TOKEN }}
        # QABOOT_AWS_ACCESS_KEY_ID: ${{ secrets.QABOOT_AWS_ACCESS_KEY_ID }}
        # QABOOT_AWS_SECRET_ACCESS_KEY: ${{ secrets.QABOOT_AWS_SECRET_ACCESS_KEY }}
        # QABOOT_ROUTE53_ACCESS_KEY_ID: ${{ secrets.QABOOT_AWS_ACCESS_KEY_ID }}
        # QABOOT_ROUTE53_SECRET_ACCESS_KEY: ${{ secrets.QABOOT_AWS_SECRET_ACCESS_KEY }} 
      run: |
        # gem install bundler
        # bundle install --local --jobs 8 --retry 3
        # eval `ssh-agent -s`
        # ssh-add ~/.ssh/id_rsa
        # bundle exec qaboot $GHES_VERSION --platform $GHES_PLATFORM --region $GHES_REGION --do-setup --generate-ssl | tee output.log
        # QABOOT_HOSTNAME=$(awk -F'http[s]?://' '{print $2}' output.log | awk '{print $1}' | xargs)
        QABOOT_HOSTNAME=fushigi.com
        echo "adding qaboot_hostname: $QABOOT_HOSTNAME to job outputs"
        echo "qaboot_hostname=$QABOOT_HOSTNAME" >> $GITHUB_OUTPUT
        echo "printing GITHUB_ENV!"
        cat $GITHUB_ENV
        
  run-tests:
    needs: [setup]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/github/ghe-tester:latest
      env:
        QABOOT_HOSTNAME: ${{ needs.setup.outputs.qaboot_hostname }}
        BAR: ${{ env.FOOBAR }}
    env:
      QABOOT_HOSTNAME: ${{ needs.setup.outputs.qaboot_hostname }}
      FOOBAR: "yes it is foobar"
    steps:
    - name: Print ENV
      run: env
    - name: Run Sanity Tests
      run: |
        env
        MAX_TRIES=60
        SLEEP_TIME=5
        for i in $(seq 1 $MAX_TRIES); do
          if ssh -o BatchMode=yes -p 122 "admin@$QABOOT_HOSTNAME" true; then
              echo "$QABOOT_HOSTNAME resolved successfully"
              DOTCOM_LOGIN=$USER DOTCOM_PASSWORD="${{ secrets.DOTCOM_PASSWORD }}" script/sanity-tests $QABOOT_HOSTNAME
              echo "true"
              exit 0
            else
              echo "$QABOOT_HOSTNAME not resolved yet, retrying in $SLEEP_TIME seconds"
              sleep $SLEEP_TIME
           fi
        done
        echo "Error: $QABOOT_HOSTNAME did not resolve after $((MAX_TRIES * SLEEP_TIME)) seconds"

        
